<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="style_8hpp" kind="file" language="C++">
    <compoundname>style.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">variant</includes>
    <includes local="no">algorithm</includes>
    <includes local="yes">gvizard/utils.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/cthulhu/projects/repos/libgvizard/include/gvizard/attrtypes/style.hpp</label>
        <link refid="style_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="7">
        <label>gvizard/utils.hpp</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="5">
        <label>variant</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structgviz_1_1attrtypes_1_1_style_item" prot="public">gviz::attrtypes::StyleItem</innerclass>
    <innerclass refid="structgviz_1_1attrtypes_1_1_builtin_style_item" prot="public">gviz::attrtypes::BuiltinStyleItem</innerclass>
    <innerclass refid="structgviz_1_1attrtypes_1_1_style" prot="public">gviz::attrtypes::Style</innerclass>
    <innernamespace refid="namespacegviz">gviz</innernamespace>
    <innernamespace refid="namespacegviz_1_1attrtypes">gviz::attrtypes</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>GVIZARD_ATTRTYPES_STYLE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GVIZARD_ATTRTYPES_STYLE_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gvizard/utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gviz::attrtypes<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>CommonStyle<sp/>:<sp/>uint8_t<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>none<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>dashed,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>dotted,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>solid,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>invis,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>bold</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>NodeStyleOnly<sp/>:<sp/>uint8_t<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>none<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>filled,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>striped,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>wedged,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>diagonals,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>rounded,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>radial</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>EdgeStyleOnly<sp/>:<sp/>uint8_t<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>none<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>tapered</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ClusterStyleOnly<sp/>:<sp/>uint8_t<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>none<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>filled,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>striped,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>rounded,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>radial</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structgviz_1_1attrtypes_1_1_style_item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>args;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="51"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>==<sp/>other.name<sp/>&amp;&amp;<sp/>args<sp/>==<sp/>other.args;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="56"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>!=<sp/>other.name<sp/>||<sp/>args<sp/>!=<sp/>other.args;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structgviz_1_1attrtypes_1_1_builtin_style_item" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>builtin_style_type<sp/>=<sp/>std::variant&lt;CommonStyle,<sp/>NodeStyleOnly,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EdgeStyleOnly,<sp/>ClusterStyleOnly&gt;;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>builtin_style_type<sp/>name;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>args;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>(builtin_style_type<sp/>style,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vecargs<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>name(style)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>args(std::move(vecargs))</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="74"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>==<sp/>other.name<sp/>&amp;&amp;<sp/>args<sp/>==<sp/>other.args;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="79"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>!=<sp/>other.name<sp/>||<sp/>args<sp/>!=<sp/>other.args;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref><sp/>to_style_item()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::visit(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>style)<sp/>-&gt;<sp/>std::string</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enum_type<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(style);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bool(style)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::string(utils::EnumHelper&lt;enum_type&gt;::to_str(style))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>args</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="structgviz_1_1attrtypes_1_1_style" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>item_type<sp/>=<sp/>std::variant&lt;BuiltinStyleItem,<sp/>StyleItem&gt;;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_style_item<sp/>=</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>item_type&amp;<sp/>item)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::visit(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utils::LambdaVisitor{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref>&amp;<sp/>arg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>&amp;<sp/>arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg.to_style_item();<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::vector&lt;item_type&gt;<sp/>items{};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>()<sp/>:<sp/>items{}<sp/>{}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(CommonStyle<sp/>style)<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(<ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>(style))<sp/>{}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(NodeStyleOnly<sp/>style)<sp/><sp/><sp/><sp/>:<sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(<ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>(style))<sp/>{}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(EdgeStyleOnly<sp/>style)<sp/><sp/><sp/><sp/>:<sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(<ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>(style))<sp/>{}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(ClusterStyleOnly<sp/>style)<sp/>:<sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(<ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref>(style))<sp/>{}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(<ref refid="structgviz_1_1attrtypes_1_1_style_item" kindref="compound">StyleItem</ref><sp/>styleitem)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>items.push_back(styleitem);<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(<ref refid="structgviz_1_1attrtypes_1_1_builtin_style_item" kindref="compound">BuiltinStyleItem</ref><sp/>styleitem)<sp/>{<sp/>items.push_back(styleitem);<sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>(std::vector&lt;item_type&gt;<sp/>vector)<sp/>:<sp/>items(std::move(vector))<sp/>{}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="131"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>items<sp/>==<sp/>other.items;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="136"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>items<sp/>!=<sp/>other.items;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="structgviz_1_1attrtypes_1_1_style" kindref="compound">Style</ref>&amp;<sp/>all_style_items()</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(items),<sp/>std::end(items),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(items),<sp/>to_style_item</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>std::vector&lt;StyleItem&gt;<sp/>to_style_item_vector()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="150"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;StyleItem&gt;<sp/>style_items{};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>style_items.reserve(items.size());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(items),<sp/>std::end(items),</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(style_items),<sp/>to_style_item</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>style_items;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gviz::attrtypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GVIZARD_ATTRTYPES_STYLE_HPP_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/cthulhu/projects/repos/libgvizard/include/gvizard/attrtypes/style.hpp"/>
  </compounddef>
</doxygen>
